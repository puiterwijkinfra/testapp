apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    app.openshift.io/route-disabled: "false"
    app.openshift.io/vcs-ref: ""
    app.openshift.io/vcs-uri: https://github.com/puiterwijkinfra/testapp
    deployment.kubernetes.io/revision: "7"
    image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"testapp:latest","namespace":"testapp"},"fieldPath":"spec.template.spec.containers[?(@.name==\"testapp\")].image","pause":"false"}]'
  labels:
    app: testapp
    app.kubernetes.io/component: testapp
    app.kubernetes.io/instance: testapp
    app.kubernetes.io/name: testapp
    app.kubernetes.io/part-of: testapp-app
    app.openshift.io/runtime: python
    app.openshift.io/runtime-version: 3.9-ubi9
  name: testapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testapp
  template:
    metadata:
      labels:
        app: testapp
        deployment: testapp
    spec:
      containers:
      - image: image-registry.openshift-image-registry.svc:5000/testapp/testapp@sha256:60fdba19c041264698a8d3e4827439259f9d6d076caacc95b644903ce11d42e9
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: testapp
        ports:
        - containerPort: 8000
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
